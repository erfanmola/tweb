{"version":3,"mappings":";8JAOO,MAAMA,EAA6B,IAAM,CAC9CC,EAAgB,sBAAsB,EAAE,QAAQ,MAAMC,GAAe,CAC9DA,KAAcC,IACEA,EAAAD,CAAU,EAAI,IAAIE,GAGlCF,KAAcG,IACjBA,EAAyBH,CAAU,EAAI,IAAII,EAAgBJ,CAAU,EAC5CG,EAAAH,CAAU,EAAE,mBAGdG,EAAAH,CAAU,EAAE,UAAU,EAAE,KAAK,MAAM,CAACK,CAAW,IAAM,CACtE,MAAAC,EAAWC,EAA2BP,CAAU,EACnCC,EAAAD,CAAU,EAAE,SAAWM,EAErCN,KAAcQ,IACjBA,EAAcR,CAAU,EAAI,IAAIS,EAAeT,CAAU,GAG7CQ,EAAAR,CAAU,EAAE,QACZQ,EAAAR,CAAU,EAAE,mBAEjBM,EAAA,kBAAkB,OAAOI,EAAK,qBAAqB,EAC7D,EACF,EAEEX,EAAgB,wBAAwB,OAAS,GAClD,SAAS,cAAc,+BAA+B,EAAE,UAAU,IAAI,sCAAsC,CAEhH,ECtBMY,EAAe,KACnBC,EAAU,SAAS,gBAAgB,YAAY,YAAa,CAAC,EAAG,oBAAoB,EAIhFF,EAAK,yBACPA,EAAK,iBAAiB,EAAE,KAAMG,GAAa,CACtCA,EAAS,OACLH,EAAA,YAAYG,EAAS,SAAS,CACrC,CACD,EAGEC,EAAA,OAAO,MAAM,QAAU,GAEVC,IAEFhB,EAAA,oBAAoBA,EAAgB,oBAAqB,GAC9CD,IAEpB,QAAQ,IAAI,CAAAkB,EAAA,IACjB,OAAO,iCAAsC,yEAC7CC,EAAU,EACV,8BAA+B,iBAAiB,UAAY,QAAQ,QAAQ,EAAID,EAAA,WAAO,iDAAkD,qBAC1I,GAAE,KAAK,CAAC,CAACE,CAAiB,IAAM,CAC/BA,EAAkB,QAAQ,QAC1B,WAAW,IAAM,CACN,wBAAe,YAAY,EAAE,OAAO,GAC5C,GAAG,EACP,GAGGJ,EAAO,IAAIK,EAAK,aAAc,GAAOR,CAAY","names":["initializeInstanceHandlers","instanceManager","instanceId","rootScopeInstances","RootScope","apiManagerProxyInstances","ApiManagerProxy","stateResult","managers","getProxiedManagersInstance","multiInstance","SingleInstance","I18n","onFirstMount","rootScope","langPack","page","blurActiveElement","__vitePreload","loadFonts","appDialogsManager","Page"],"ignoreList":[],"sources":["../src/config/instances-utils.ts","../src/pages/pageIm.ts"],"sourcesContent":["import {RootScope, rootScopeInstances} from '../lib/rootScope';\nimport {getProxiedManagersInstance} from '../lib/appManagers/getProxiedManagers';\nimport I18n from '../lib/langPack';\nimport {apiManagerProxyInstances, ApiManagerProxy} from '../lib/mtproto/mtprotoworker';\nimport {multiInstance, SingleInstance} from '../lib/mtproto/singleInstance';\nimport instanceManager from './instances';\n\nexport const initializeInstanceHandlers = () => {\n  instanceManager.getPassiveInstanceIDs().forEach(async(instanceId) => {\n    if(!(instanceId in rootScopeInstances)) {\n      rootScopeInstances[instanceId] = new RootScope();\n    }\n\n    if(!(instanceId in apiManagerProxyInstances)) {\n      apiManagerProxyInstances[instanceId] = new ApiManagerProxy(instanceId);\n      apiManagerProxyInstances[instanceId].sendEnvironment();\n    }\n\n    apiManagerProxyInstances[instanceId].sendState().then(async([stateResult]) => {\n      const managers = getProxiedManagersInstance(instanceId);\n      rootScopeInstances[instanceId].managers = managers;\n\n      if(!(instanceId in multiInstance)) {\n        multiInstance[instanceId] = new SingleInstance(instanceId);\n      }\n\n      multiInstance[instanceId].start();\n      multiInstance[instanceId].activateInstance();\n\n      managers.apiUpdatesManager.attach(I18n.lastRequestedLangCode);\n    });\n  });\n\n  if(instanceManager.getPassiveInstanceIDs().length > 0) {\n    document.querySelector('.animated-menu-icon-indicator').classList.add('animated-menu-icon-indicator-visible');\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport instanceManager from '../config/instances';\nimport {initializeInstanceHandlers} from '../config/instances-utils';\nimport blurActiveElement from '../helpers/dom/blurActiveElement';\nimport loadFonts from '../helpers/dom/loadFonts';\nimport I18n from '../lib/langPack';\nimport rootScope from '../lib/rootScope';\nimport Page from './page';\n\nconst onFirstMount = () => {\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignedIn'});\n  // ! TOO SLOW\n  /* appStateManager.saveState(); */\n\n  if(!I18n.requestedServerLanguage) {\n    I18n.getCacheLangPack().then((langPack) => {\n      if(langPack.local) {\n        I18n.getLangPack(langPack.lang_code);\n      }\n    });\n  }\n\n  page.pageEl.style.display = '';\n\n  blurActiveElement();\n\n  instanceManager.setInstanceLoggedIn(instanceManager.getActiveInstanceID());\n  initializeInstanceHandlers();\n\n  return Promise.all([\n    import('../lib/appManagers/appDialogsManager'),\n    loadFonts()/* .then(() => new Promise((resolve) => window.requestAnimationFrame(resolve))) */,\n    'requestVideoFrameCallback' in HTMLVideoElement.prototype ? Promise.resolve() : import('../helpers/dom/requestVideoFrameCallbackPolyfill')\n  ]).then(([appDialogsManager]) => {\n    appDialogsManager.default.start();\n    setTimeout(() => {\n      document.getElementById('auth-pages').remove();\n    }, 1e3);\n  });\n};\n\nconst page = new Page('page-chats', false, onFirstMount);\nexport default page;\n"],"file":"pageIm-Dz55Dpoz.js"}