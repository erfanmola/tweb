{"version":3,"file":"mediaEditor.worker-ncuEHBdZ.js","sources":["src/components/mediaEditor/mediaEditorUtils.ts","src/components/mediaEditor/mediaEditor.worker.ts"],"sourcesContent":["\nexport class MediaEditorFilterUtils {\n  static enhance(pixels: Uint8ClampedArray, width: number, height: number, amount: number): Uint8ClampedArray {\n    const brightnessAmount = 1 + 0.1 * amount;\n    pixels = this.brightness(pixels, brightnessAmount);\n\n    const contrastAmount = 10 * amount;\n    pixels = this.contrast(pixels, contrastAmount);\n\n    const saturationAmount = 1 + 0.2 * amount;\n    pixels = this.saturation(pixels, saturationAmount);\n\n    const vignetteAmount = 0.1 * amount;\n    pixels = this.vignette(pixels, width, height, vignetteAmount);\n\n    return pixels;\n  }\n\n  static brightness(pixels: Uint8ClampedArray, amount: number): Uint8ClampedArray {\n    for(let i = 0; i < pixels.length; i += 4) {\n      pixels[i] = Math.min(pixels[i] * amount, 255) | 0;\n      pixels[i + 1] = Math.min(pixels[i + 1] * amount, 255) | 0;\n      pixels[i + 2] = Math.min(pixels[i + 2] * amount, 255) | 0;\n    }\n    return pixels;\n  }\n\n  static contrast(pixels: Uint8ClampedArray, amount: number): Uint8ClampedArray {\n    const factor = (259 * (amount + 255)) / (255 * (259 - amount));\n    for(let i = 0; i < pixels.length; i += 4) {\n      pixels[i] = Math.min(Math.max(factor * (pixels[i] - 128) + 128, 0), 255) | 0;\n      pixels[i + 1] = Math.min(Math.max(factor * (pixels[i + 1] - 128) + 128, 0), 255) | 0;\n      pixels[i + 2] = Math.min(Math.max(factor * (pixels[i + 2] - 128) + 128, 0), 255) | 0;\n    }\n    return pixels;\n  }\n\n  static saturation(pixels: Uint8ClampedArray, amount: number): Uint8ClampedArray {\n    const RW = 0.2989, RG = 0.587, RB = 0.114;\n    for(let i = 0; i < pixels.length; i += 4) {\n      const gray = (RW * pixels[i] + RG * pixels[i + 1] + RB * pixels[i + 2]) | 0;\n\n      pixels[i] = Math.min(Math.max(gray + amount * (pixels[i] - gray), 0), 255) | 0;\n      pixels[i + 1] = Math.min(Math.max(gray + amount * (pixels[i + 1] - gray), 0), 255) | 0;\n      pixels[i + 2] = Math.min(Math.max(gray + amount * (pixels[i + 2] - gray), 0), 255) | 0;\n    }\n    return pixels;\n  }\n\n  static warmth(pixels: Uint8ClampedArray, amount: number): Uint8ClampedArray {\n    for(let i = 0; i < pixels.length; i += 4) {\n      pixels[i] = Math.min(pixels[i] + amount, 255) | 0;\n      pixels[i + 2] = Math.max(pixels[i + 2] - amount, 0) | 0;\n    }\n    return pixels;\n  }\n\n  static fade(pixels: Uint8ClampedArray, amount: number): Uint8ClampedArray {\n    for(let i = 0; i < pixels.length; i += 4) {\n      const r = pixels[i];\n      const g = pixels[i + 1];\n      const b = pixels[i + 2];\n\n      const gray = 0.2989 * r + 0.587 * g + 0.114 * b;\n\n      pixels[i] = Math.min(Math.max((1 - amount) * r + amount * gray, 0), 255) | 0;\n      pixels[i + 1] = Math.min(Math.max((1 - amount) * g + amount * gray, 0), 255) | 0;\n      pixels[i + 2] = Math.min(Math.max((1 - amount) * b + amount * gray, 0), 255) | 0;\n    }\n    return pixels;\n  }\n\n  static highlights(pixels: Uint8ClampedArray, amount: number): Uint8ClampedArray {\n    for(let i = 0; i < pixels.length; i += 4) {\n      const r = pixels[i];\n      const g = pixels[i + 1];\n      const b = pixels[i + 2];\n\n      const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n\n      if(brightness > 128) {\n        pixels[i] = Math.min(Math.max(r + amount * (255 - r), 0), 255) | 0;\n        pixels[i + 1] = Math.min(Math.max(g + amount * (255 - g), 0), 255) | 0;\n        pixels[i + 2] = Math.min(Math.max(b + amount * (255 - b), 0), 255) | 0;\n      }\n    }\n    return pixels;\n  }\n\n  static shadows(pixels: Uint8ClampedArray, amount: number): Uint8ClampedArray {\n    amount = Math.max(-1, Math.min(1, amount));\n\n    for(let i = 0; i < pixels.length; i += 4) {\n      const r = pixels[i];\n      const g = pixels[i + 1];\n      const b = pixels[i + 2];\n\n      const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n\n      if(brightness < 128) {\n        pixels[i] = Math.min(Math.max(r + amount * r, 0), 255) | 0;\n        pixels[i + 1] = Math.min(Math.max(g + amount * g, 0), 255) | 0;\n        pixels[i + 2] = Math.min(Math.max(b + amount * b, 0), 255) | 0;\n      }\n    }\n    return pixels;\n  }\n\n  static vignette(pixels: Uint8ClampedArray, width: number, height: number, amount: number): Uint8ClampedArray {\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxDistance = Math.sqrt(centerX * centerX + centerY * centerY);\n\n    for(let y = 0; y < height; y++) {\n      for(let x = 0; x < width; x++) {\n        const offset = (y * width + x) * 4;\n        const r = pixels[offset];\n        const g = pixels[offset + 1];\n        const b = pixels[offset + 2];\n\n        const distance = Math.sqrt((x - centerX) * (x - centerX) + (y - centerY) * (y - centerY));\n        const vignetteEffect = 1 - Math.min(distance / maxDistance * amount, 1);\n\n        pixels[offset] = Math.min(Math.max(r * vignetteEffect, 0), 255) | 0;\n        pixels[offset + 1] = Math.min(Math.max(g * vignetteEffect, 0), 255) | 0;\n        pixels[offset + 2] = Math.min(Math.max(b * vignetteEffect, 0), 255) | 0;\n      }\n    }\n    return pixels;\n  }\n\n  static grain(pixels: Uint8ClampedArray, width: number, height: number, amount: number): Uint8ClampedArray {\n    for(let y = 0; y < height; y++) {\n      for(let x = 0; x < width; x++) {\n        const offset = (y * width + x) * 4;\n        const r = pixels[offset];\n        const g = pixels[offset + 1];\n        const b = pixels[offset + 2];\n\n        const noise = (Math.random() - 0.5) * 255 * amount;\n\n        pixels[offset] = Math.min(Math.max(r + noise, 0), 255) | 0;\n        pixels[offset + 1] = Math.min(Math.max(g + noise, 0), 255) | 0;\n        pixels[offset + 2] = Math.min(Math.max(b + noise, 0), 255) | 0;\n      }\n    }\n    return pixels;\n  }\n\n  static sharpen(pixels: Uint8ClampedArray, width: number, height: number, amount: number): Uint8ClampedArray {\n    const originalPixels = new Uint8ClampedArray(pixels);\n\n    function getPixel(x: number, y: number, offset: number = 0): number {\n      if(x < 0 || x >= width || y < 0 || y >= height) {\n        return 0;\n      }\n      return originalPixels[(y * width + x) * 4 + offset];\n    }\n\n    for(let y = 0; y < height; y++) {\n      for(let x = 0; x < width; x++) {\n        const offset = (y * width + x) * 4;\n\n        const r = (\n          -getPixel(x - 1, y, 0) +\n                  -getPixel(x, y - 1, 0) +\n                  5 * getPixel(x, y, 0) +\n                  -getPixel(x, y + 1, 0) +\n                  -getPixel(x + 1, y, 0)\n        );\n        const g = (\n          -getPixel(x - 1, y, 1) +\n                  -getPixel(x, y - 1, 1) +\n                  5 * getPixel(x, y, 1) +\n                  -getPixel(x, y + 1, 1) +\n                  -getPixel(x + 1, y, 1)\n        );\n        const b = (\n          -getPixel(x - 1, y, 2) +\n                  -getPixel(x, y - 1, 2) +\n                  5 * getPixel(x, y, 2) +\n                  -getPixel(x, y + 1, 2) +\n                  -getPixel(x + 1, y, 2)\n        );\n\n        pixels[offset] = Math.min(Math.max((1 - amount) * getPixel(x, y, 0) + amount * r, 0), 255) | 0;\n        pixels[offset + 1] = Math.min(Math.max((1 - amount) * getPixel(x, y, 1) + amount * g, 0), 255) | 0;\n        pixels[offset + 2] = Math.min(Math.max((1 - amount) * getPixel(x, y, 2) + amount * b, 0), 255) | 0;\n      }\n    }\n\n    return pixels;\n  }\n}\n\nexport class MediaEditorCropUtils {\n  static flip(pixels: Uint8ClampedArray, width: number, height: number): Uint8ClampedArray {\n    const flippedPixels = new Uint8ClampedArray(pixels.length);\n    for(let y = 0; y < height; y++) {\n      for(let x = 0; x < width; x++) {\n        for(let c = 0; c < 4; c++) {\n          flippedPixels[(y * width + x) * 4 + c] = pixels[(y * width + (width - x - 1)) * 4 + c];\n        }\n      }\n    }\n    return flippedPixels;\n  }\n\n  static rotate(pixels: Uint8ClampedArray, degree: number, width: number, height: number): { pixels: Uint8ClampedArray, width: number, height: number } {\n    const radians = degree * Math.PI / 180;\n    const sin = Math.sin(radians);\n    const cos = Math.cos(radians);\n\n    const newWidth = Math.abs(Math.ceil(width * cos + height * sin));\n    const newHeight = Math.abs(Math.ceil(width * sin + height * cos));\n\n    const rotatedPixels = new Uint8ClampedArray(newWidth * newHeight * 4);\n\n    const x0 = width / 2;\n    const y0 = height / 2;\n    const x0New = newWidth / 2;\n    const y0New = newHeight / 2;\n\n    for(let y = 0; y < newHeight; y++) {\n      for(let x = 0; x < newWidth; x++) {\n        const xOld = Math.cos(radians) * (x - x0New) - Math.sin(radians) * (y - y0New) + x0;\n        const yOld = Math.sin(radians) * (x - x0New) + Math.cos(radians) * (y - y0New) + y0;\n\n        const xOldInt = Math.floor(xOld);\n        const yOldInt = Math.floor(yOld);\n\n        if(xOldInt >= 0 && xOldInt < width && yOldInt >= 0 && yOldInt < height) {\n          for(let c = 0; c < 4; c++) {\n            rotatedPixels[(y * newWidth + x) * 4 + c] = pixels[(yOldInt * width + xOldInt) * 4 + c];\n          }\n        }\n      }\n    }\n\n    return {\n      pixels: rotatedPixels,\n      width: newWidth,\n      height: newHeight\n    };\n  }\n}\n\nexport class MediaEditorSVGUtils {\n  static getPathPoints(path: SVGPathElement, numSamples: number = 100): { x: number, y: number }[] {\n    const length = path.getTotalLength();\n    const points = [];\n    for(let i = 0; i <= numSamples; i++) {\n      const point = path.getPointAtLength((i / numSamples) * length);\n      points.push({x: point.x, y: point.y});\n    }\n    return points;\n  }\n\n  static doLineSegmentsIntersect(p1: { x: number, y: number }, p2: { x: number, y: number }, p3: { x: number, y: number }, p4: { x: number, y: number }): boolean {\n    const d1 = (p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x);\n    const d2 = (p4.x - p3.x) * (p2.y - p3.y) - (p4.y - p3.y) * (p2.x - p3.x);\n    const d3 = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\n    const d4 = (p2.x - p1.x) * (p4.y - p1.y) - (p2.y - p1.y) * (p4.x - p1.x);\n\n    if(((d1 > 0 && d2 < 0) || (d1 < 0 && d2 > 0)) && ((d3 > 0 && d4 < 0) || (d3 < 0 && d4 > 0))) {\n      return true;\n    }\n    return (d1 == 0 && this.isOnSegment(p3, p4, p1)) ||\n             (d2 == 0 && this.isOnSegment(p3, p4, p2)) ||\n             (d3 == 0 && this.isOnSegment(p1, p2, p3)) ||\n             (d4 == 0 && this.isOnSegment(p1, p2, p4));\n  }\n\n  static isOnSegment(p1: { x: number, y: number }, p2: { x: number, y: number }, p: { x: number, y: number }): boolean {\n    return p.x <= Math.max(p1.x, p2.x) && p.x >= Math.min(p1.x, p2.x) &&\n             p.y <= Math.max(p1.y, p2.y) && p.y >= Math.min(p1.y, p2.y);\n  }\n\n  static arePathsIntersecting(path1: SVGPathElement, path2: SVGPathElement): boolean {\n    const points1 = this.getPathPoints(path1);\n    const points2 = this.getPathPoints(path2);\n\n    for(let i = 0; i < points1.length - 1; i++) {\n      for(let j = 0; j < points2.length - 1; j++) {\n        if(this.doLineSegmentsIntersect(points1[i], points1[i + 1], points2[j], points2[j + 1])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import {MediaEditorAction} from './mediaEditor';\nimport {MediaEditorActionCrop} from './mediaEditorTabCrop';\nimport {MediaEditorActionFilter} from './mediaEditorTabFilters';\nimport {MediaEditorFilterUtils, MediaEditorCropUtils} from './mediaEditorUtils';\n\nexport type MediaEditorWorkerMessage = MediaEditorWorkerMessageRender;\n\nexport type MediaEditorWorkerResponse = MediaEditorWorkerResponseRender;\n\nexport type MediaEditorWorkerMessageRender = {\n  type: 'render',\n  instance: string,\n  data: {\n    imageData: ImageData,\n    actions: MediaEditorAction[],\n    fresh: boolean\n  }\n};\n\nexport type MediaEditorWorkerResponseRender = {\n  type: 'render',\n  instance: string,\n  data: ImageData\n};\n\nclass MediaEditorActionsManager {\n  static actionFilter(pixels: Uint8ClampedArray, action: MediaEditorActionFilter, width: number, height: number) {\n    switch(action.type) {\n      case 'enhance':\n        // Amount ranges from 0 to 1\n        pixels = MediaEditorFilterUtils.enhance(pixels, width, height, MediaEditorActionsManager.clampWithRatio(action.amount, 0, 100, 0, 1));\n        break;\n      case 'brightness':\n        // Amount ranges from 0 to 2, we cap it at 0.25 and 1.75 to prevent extreme\n        pixels = MediaEditorFilterUtils.brightness(pixels, MediaEditorActionsManager.clampWithRatio(action.amount, -100, 100, 0.25, 1.75));\n        break;\n      case 'contrast':\n        // Amount ranges from -255 to 255, we cap it at -192 and 192 to prevent extreme\n        pixels = MediaEditorFilterUtils.contrast(pixels, MediaEditorActionsManager.clampWithRatio(action.amount, -100, 100, -192, 192));\n        break;\n      case 'saturation':\n        // Amount ranges from 0 to 2, we cap it at 0.25 and 1.75 to prevent extreme\n        pixels = MediaEditorFilterUtils.saturation(pixels, MediaEditorActionsManager.clampWithRatio(action.amount, -100, 100, 0.25, 1.75));\n        break;\n      case 'warmth':\n        // Amount ranges from -100 to 100\n        pixels = MediaEditorFilterUtils.warmth(pixels, MediaEditorActionsManager.clampWithRatio(action.amount, -100, 100, -100, 100));\n        break;\n      case 'fade':\n        // Amount ranges from 0 to 1, we cap it at 0.75 to prevent extreme\n        pixels = MediaEditorFilterUtils.fade(pixels, MediaEditorActionsManager.clampWithRatio(action.amount, 0, 100, 0, 0.75));\n        break;\n      case 'highlights':\n        // Amount ranges from -1 to 1, we cap it at -0.125 and 0.125 to prevent extreme, it looks trash to be honest\n        pixels = MediaEditorFilterUtils.highlights(pixels, MediaEditorActionsManager.clampWithRatio(action.amount, -100, 100, -0.125, 0.125));\n        break;\n      case 'shadows':\n        // Amount ranges from -1 to 1, we cap it at -0.125 and 0.125 to prevent extreme, it looks trash to be honest\n        pixels = MediaEditorFilterUtils.shadows(pixels, MediaEditorActionsManager.clampWithRatio(action.amount, -100, 100, -0.125, 0.125));\n        break;\n      case 'vignette':\n        // Amount ranges from 0 to 1\n        pixels = MediaEditorFilterUtils.vignette(pixels, width, height, MediaEditorActionsManager.clampWithRatio(action.amount, 0, 100, 0, 1));\n        break;\n      case 'grain':\n        // Amount ranges from 0 to 1, we cap it at 0 to 0.25 to prevent extreme\n        pixels = MediaEditorFilterUtils.grain(pixels, width, height, MediaEditorActionsManager.clampWithRatio(action.amount, 0, 100, 0, 0.25));\n        break;\n      case 'sharpen':\n        // Amount ranges from 0 to 1, we cap it at 0 to 0.75 to prevent extreme\n        pixels = MediaEditorFilterUtils.sharpen(pixels, width, height, MediaEditorActionsManager.clampWithRatio(action.amount, 0, 100, 0, 0.75));\n        break;\n    }\n\n    return pixels;\n  }\n\n  static actionCrop(pixels: Uint8ClampedArray, action: MediaEditorActionCrop, width: number, height: number) {\n    switch(action.type) {\n      case 'flip':\n        pixels = MediaEditorCropUtils.flip(pixels, width, height);\n        break;\n      case 'rotate':\n        const rotate = MediaEditorCropUtils.rotate(pixels, action.degree, width, height);\n        pixels = rotate.pixels;\n        width = rotate.width;\n        height = rotate.height;\n        break;\n    }\n\n    return {pixels, width, height};\n  }\n\n  static clampWithRatio(v1: number, x1: number, y1: number, x2: number, y2: number) {\n    const clampedValue = Math.max(x1, Math.min(v1, y1));\n    const ratio = (clampedValue - x1) / (y1 - x1);\n    const scaledValue = x2 + ratio * (y2 - x2);\n\n    return scaledValue;\n  }\n}\n\nconst renderPipelineOrder = {\n  // leave the first index empty so the first digit never starts with 0, '0' + n results in something like 08 that parseInt() of it is in another base\n  // only 'filter' and 'crop' are processed here, the rest is defined to not mess up types, also for future cases\n  actions: ['', 'filter', 'crop', 'sticker', 'text', 'paint'],\n  sticker: ['static'],\n  text: ['default'],\n  paint: ['default'],\n  crop: ['flip', 'rotate'],\n  filter: [\n    'enhance',\n    'brightness',\n    'contrast',\n    'saturation',\n    'warmth',\n    'shadows',\n    'highlights',\n    'sharpen',\n    'grain',\n    'fade',\n    'vignette'\n  ]\n};\n\nonmessage = (e) => {\n  const {type, data, instance} = e.data as MediaEditorWorkerMessage;\n\n  switch(type) {\n    case 'render':\n      let pixels = data.imageData.data;\n      let width = data.imageData.width;\n      let height = data.imageData.height;\n\n      const actions = data.actions.sort((a, b) => {\n        const aWeight = parseInt(`${renderPipelineOrder.actions.indexOf(a.action)}${renderPipelineOrder[a.action].indexOf(a.type).toString().padStart(2, '0')}`);\n        const bWeight = parseInt(`${renderPipelineOrder.actions.indexOf(b.action)}${renderPipelineOrder[b.action].indexOf(b.type).toString().padStart(2, '0')}`);\n        if(aWeight && bWeight) {\n          return aWeight - bWeight;\n        }\n      });\n\n      for(const action of actions) {\n        switch(action.action) {\n          case 'filter':\n            pixels = MediaEditorActionsManager.actionFilter(pixels, action, width, height);\n            break;\n          case 'crop':\n            const crop = MediaEditorActionsManager.actionCrop(pixels, action, width, height);\n            pixels = crop.pixels;\n            width = crop.width;\n            height = crop.height;\n            break;\n        }\n      };\n\n      const imageData = new ImageData(pixels, width, height, {colorSpace: data.imageData.colorSpace});\n\n      postMessage({\n        type: 'render',\n        instance: instance,\n        data: imageData\n      } as MediaEditorWorkerResponseRender);\n      break;\n  }\n};\n"],"names":["MediaEditorFilterUtils","pixels","width","height","amount","brightnessAmount","contrastAmount","saturationAmount","vignetteAmount","i","factor","gray","r","g","b","centerX","centerY","maxDistance","y","x","offset","distance","vignetteEffect","noise","originalPixels","getPixel","MediaEditorCropUtils","flippedPixels","c","degree","radians","sin","cos","newWidth","newHeight","rotatedPixels","x0","y0","x0New","y0New","xOld","yOld","xOldInt","yOldInt","MediaEditorActionsManager","action","rotate","v1","x1","y1","x2","y2","ratio","renderPipelineOrder","e","type","data","instance","actions","a","aWeight","bWeight","crop","imageData"],"mappings":"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"}